{
  "openapi": "3.0.3",
  "info": {
    "title": "TRIvial API",
    "description": "server based on TRI data combined with several other databases ",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "repository github",
    "url": "https://github.com/Bmaeve/TRIvial"
  },
  "paths": {
    "/dbInfo/getTables": {
      "get": {
        "tags": [
          "dbInfo"
        ],
        "summary": "Finds every available table",
        "operationId": "findTables",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "BDTopoEnrichie",
                    "BDTRI"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/dbInfo/{table}": {
      "get": {
        "tags": [
          "dbInfo"
        ],
        "summary": "Find table information",
        "description": "Returns table name and columns  information",
        "operationId": "getTableInfo",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "name of the table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "400": {
            "description": "Table not exists"
          }
        }
      }
    },
    "/dbInfo/{table}/{column}/getMinMax": {
      "get": {
        "tags": [
          "dbInfo"
        ],
        "summary": "Find the minimum and maximum values of the column",
        "description": "The column has to have a number for type",
        "operationId": "getColMinMax",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "name of the table",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "column",
            "in": "path",
            "description": "name of the column",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinMax"
                }
              }
            }
          },
          "400": {
            "description": "Column is not a number or Table/column not found"
          }
        }
      }
    },
    "/dbInfo/{table}/{column}/getDistinctValues": {
      "get": {
        "tags": [
          "dbInfo"
        ],
        "summary": "Find the distinct values of the column",
        "description": "The column has to have a string for type, this should not be not be used to require on ids",
        "operationId": "getColDistValues",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "name of the table",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "column",
            "in": "path",
            "description": "name of the column",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistinctValues"
                }
              }
            }
          },
          "400": {
            "description": "Table or column not found"
          }
        }
      }
    },
    "/data/{table}/selectData": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "Return every row of the table",
        "description": "every row is returned with its geometry and features in geojson format",
        "operationId": "getFetchData",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "name of the table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data"
                }
              }
            }
          },
          "400": {
            "description": "table/column not exists"
          }
        }
      },
      "post": {
        "tags": [
          "data"
        ],
        "summary": "Finds data according to parameters",
        "description": "Returns the requested data, multi parameters are send to the body of the request. \n\nThis body is a json (JSON.stringify(data)) of which keys are columns of the table with the following attributes :\n  \n  - values : array of values which are selected\n  - min : only for numbers, minimum of the selected values for this column\n  - max : only for numbers, maximum of the selected values for this column\n\nFor example :\n```\n  data = {\n      \"hauteur\":\n          { // looking for column \"hauteur\" between 50 and 100\n              \"min\": 50,\n              \"max\":100\n          },\n      \"origin_bat\":\n          { // looking for column \"origin_bat\" having for value Hopital or Autre\n              \"values\": [\"Hopital\", \"Autre\"]\n          }\n  }\n```",
        "operationId": "postFetchData",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "name of the table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data"
                }
              }
            }
          },
          "400": {
            "description": "table/column not exists"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/enjeux/getTypesEnjeux": {
      "get": {
        "tags": [
          "enjeux"
        ],
        "summary": "returns types of enjeu",
        "description": "return the different types of available \"enjeux\" with their key (table name), full name and interesting columns",
        "operationId": "enjeuTypes",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enjeu"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Enjeu": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "TRANS"
          },
          "fullName": {
            "type": "string",
            "example": "Transorts"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "BDTopoEnrichie"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        }
      },
      "Column": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "hauteur"
          },
          "type": {
            "type": "string",
            "example": "number"
          }
        }
      },
      "Data": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "batiremarquable"
          },
          "type": {
            "type": "string",
            "example": "FeatureCollection"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        }
      },
      "Feature": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Feature"
          },
          "properties": {
            "type": "string",
            "example": "object of features (refere to geojson structure)"
          },
          "geometry": {
            "type": "string",
            "example": "object of geometry (refere to geojson structure)"
          }
        }
      },
      "DistinctValues": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "hopital"
        }
      },
      "MinMax": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "number",
            "example": 4.3,
            "default": null,
            "description": "if the column type is a number, get the minimum value. else return null"
          },
          "maximum": {
            "type": "number",
            "example": 12.5,
            "default": null,
            "description": "if the column type is a number, get the maximum value. else return null"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    }
  }
}