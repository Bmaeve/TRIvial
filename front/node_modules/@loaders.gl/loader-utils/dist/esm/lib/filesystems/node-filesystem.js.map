{"version":3,"file":"node-filesystem.js","names":["fs","NodeFileSystem","constructor","options","fetch","_fetch","readdir","dirname","stat","path","info","size","Number","isDirectory","fallbackFetch","open","flags","mode","close","fd","fstat","read","buffer","offset","length","byteLength","position","totalBytesRead","bytesRead"],"sources":["../../../../src/lib/filesystems/node-filesystem.ts"],"sourcesContent":["import * as fs from '../node/fs';\nimport {IFileSystem, IRandomAccessReadFileSystem} from '../../types';\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n\ntype Stat = {\n  size: number;\n  isDirectory: () => boolean;\n  info?: fs.Stats;\n};\n\ntype ReadOptions = {\n  buffer?: Buffer;\n  offset?: number;\n  length?: number;\n  position?: number;\n};\n\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @param options\n */\nexport default class NodeFileSystem implements IFileSystem, IRandomAccessReadFileSystem {\n  // implements IFileSystem\n  constructor(options: {[key: string]: any}) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir(dirname = '.', options?: {}): Promise<any[]> {\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path: string, options?: {}): Promise<Stat> {\n    const info = await fs.stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path: string, options: {[key: string]: any}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    // eslint-disable-next-line\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  // implements IRandomAccessFileSystem\n  async open(path: string, flags: string | number, mode?: any): Promise<number> {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd: number): Promise<void> {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd: number): Promise<Stat> {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(\n    fd: number,\n    // @ts-ignore Possibly null\n    {buffer = null, offset = 0, length = buffer.byteLength, position = null}: ReadOptions\n  ): Promise<{bytesRead: number; buffer: Buffer}> {\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fs.read(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,YAAY;AAuBhC,eAAe,MAAMC,cAAc,CAAqD;EAEtFC,WAAW,CAACC,OAA6B,EAAE;IACzC,IAAI,CAACC,KAAK,GAAGD,OAAO,CAACE,MAAM;EAC7B;EAEA,MAAMC,OAAO,GAA8C;IAAA,IAA7CC,OAAO,uEAAG,GAAG;IAAA,IAAEJ,OAAY;IACvC,OAAO,MAAMH,EAAE,CAACM,OAAO,CAACC,OAAO,EAAEJ,OAAO,CAAC;EAC3C;EAEA,MAAMK,IAAI,CAACC,IAAY,EAAEN,OAAY,EAAiB;IACpD,MAAMO,IAAI,GAAG,MAAMV,EAAE,CAACQ,IAAI,CAACC,IAAI,EAAEN,OAAO,CAAC;IACzC,OAAO;MAACQ,IAAI,EAAEC,MAAM,CAACF,IAAI,CAACC,IAAI,CAAC;MAAEE,WAAW,EAAE,MAAM,KAAK;MAAEH;IAAI,CAAC;EAClE;EAEA,MAAMN,KAAK,CAACK,IAAY,EAAEN,OAA6B,EAAE;IAGvD,MAAMW,aAAa,GAAGX,OAAO,CAACC,KAAK,IAAI,IAAI,CAACA,KAAK;IACjD,OAAOU,aAAa,CAACL,IAAI,EAAEN,OAAO,CAAC;EACrC;;EAGA,MAAMY,IAAI,CAACN,IAAY,EAAEO,KAAsB,EAAEC,IAAU,EAAmB;IAC5E,OAAO,MAAMjB,EAAE,CAACe,IAAI,CAACN,IAAI,EAAEO,KAAK,CAAC;EACnC;EAEA,MAAME,KAAK,CAACC,EAAU,EAAiB;IACrC,OAAO,MAAMnB,EAAE,CAACkB,KAAK,CAACC,EAAE,CAAC;EAC3B;EAEA,MAAMC,KAAK,CAACD,EAAU,EAAiB;IACrC,MAAMT,IAAI,GAAG,MAAMV,EAAE,CAACoB,KAAK,CAACD,EAAE,CAAC;IAC/B,OAAOT,IAAI;EACb;EAEA,MAAMW,IAAI,CACRF,EAAU,QAGoC;IAAA,IAD9C;MAACG,MAAM,GAAG,IAAI;MAAEC,MAAM,GAAG,CAAC;MAAEC,MAAM,GAAGF,MAAM,CAACG,UAAU;MAAEC,QAAQ,GAAG;IAAiB,CAAC;IAErF,IAAIC,cAAc,GAAG,CAAC;IAEtB,OAAOA,cAAc,GAAGH,MAAM,EAAE;MAC9B,MAAM;QAACI;MAAS,CAAC,GAAG,MAAM5B,EAAE,CAACqB,IAAI,CAC/BF,EAAE,EACFG,MAAM,EACNC,MAAM,GAAGI,cAAc,EACvBH,MAAM,GAAGG,cAAc,EACvBD,QAAQ,GAAGC,cAAc,CAC1B;MACDA,cAAc,IAAIC,SAAS;IAC7B;IACA,OAAO;MAACA,SAAS,EAAED,cAAc;MAAEL;IAAM,CAAC;EAC5C;AACF"}