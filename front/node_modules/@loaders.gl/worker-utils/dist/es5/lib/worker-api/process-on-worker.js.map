{"version":3,"file":"process-on-worker.js","names":["canProcessOnWorker","worker","options","WorkerFarm","isSupported","processOnWorker","data","context","name","getWorkerName","workerFarm","getWorkerFarm","source","workerPoolProps","url","getWorkerURL","workerPool","getWorkerPool","jobName","startJob","onMessage","bind","job","transferableOptions","getTransferListForWriter","postMessage","input","result","type","payload","done","error","Error","id","process","message","console","warn"],"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\nimport {getTransferListForWriter} from '../worker-utils/get-transfer-list';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {source} = options;\n  const workerPoolProps: {name: string; source?: string; url?: string} = {name, source};\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"],"mappings":"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"}