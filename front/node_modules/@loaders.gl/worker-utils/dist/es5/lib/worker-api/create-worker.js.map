{"version":3,"file":"create-worker.js","names":["requestId","inputBatches","options","createWorker","process","processInBatches","WorkerBody","inWorkerThread","context","processOnMainThread","onmessage","type","payload","Error","input","result","postMessage","AsyncQueue","resultIterator","batch","push","close","message","error","arrayBuffer","Promise","resolve","reject","id","onMessage","removeEventListener","addEventListener"],"sources":["../../../../src/lib/worker-api/create-worker.ts"],"sourcesContent":["import type {\n  WorkerMessageType,\n  WorkerMessagePayload,\n  WorkerContext,\n  Process,\n  ProcessInBatches\n} from '../../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n// import {validateWorkerVersion} from './validate-worker-version';\n\n/** Counter for jobs */\nlet requestId = 0;\nlet inputBatches: AsyncQueue<any>;\nlet options: {[key: string]: any};\n\nexport type ProcessOnMainThread = (\n  data: any,\n  options?: {[key: string]: any},\n  context?: WorkerContext\n) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  if (!WorkerBody.inWorkerThread()) {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread\n  };\n\n  // eslint-disable-next-line complexity\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', {result});\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue<any>();\n          options = payload.options || {};\n          const resultIterator = processInBatches(inputBatches, options, context);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', {result: batch});\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', {error: message});\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer: ArrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type: string, payload: WorkerMessagePayload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = {id, input: arrayBuffer, options};\n    WorkerBody.postMessage('process', payload);\n  });\n}\n"],"mappings":"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"}