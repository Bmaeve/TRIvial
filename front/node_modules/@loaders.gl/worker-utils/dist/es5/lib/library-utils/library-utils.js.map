{"version":3,"file":"library-utils.js","names":["LATEST","VERSION","loadLibraryPromises","loadLibrary","libraryUrl","moduleName","options","getLibraryUrl","loadLibraryFromFile","library","startsWith","modules","isBrowser","CDN","assert","isWorker","endsWith","fetch","response","arrayBuffer","node","requireFromFile","importScripts","text","scriptSource","loadLibraryFromString","id","requireFromString","eval","call","global","script","document","createElement","appendChild","createTextNode","e","body"],"sources":["../../../../src/lib/library-utils/library-utils.ts"],"sourcesContent":["/* global importScripts */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\n/**\n * TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\n * 'beta' on beta branch, 'latest' on prod branch\n */\nconst LATEST = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises: Record<string, Promise<any>> = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n\n  loadLibraryPromises[libraryUrl] =\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library: string, moduleName?: string, options?: any): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl: string): Promise<any> {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    try {\n      return node && node.requireFromFile && (await node.requireFromFile(libraryUrl));\n    } catch {\n      return null;\n    }\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource: string, id: string): null | any {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"],"mappings":"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"}