{"version":3,"file":"worker-farm.js","names":["DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","WorkerFarm","props","Map","setProps","workerPools","values","workerPool","destroy","_getWorkerPoolProps","options","name","source","url","get","WorkerPool","set","WorkerThread","isSupported","_workerFarm"],"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency - max count of workers\n * @param maxMobileConcurrency - max count of workers on mobile\n * @param maxConcurrency - max count of workers\n * @param reuseWorkers - if false, destroys workers when task is completed\n * @param onDebug - callback intended to allow application to log worker pool activity\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: Required<WorkerFarmProps> = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map<string, WorkerPool>();\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA;AACA;AAA2C;AAAA;AAAA;AAAA;AAAA;AAgB3C,IAAMA,aAAwC,GAAG;EAC/CC,cAAc,EAAE,CAAC;EACjBC,oBAAoB,EAAE,CAAC;EACvBC,YAAY,EAAE,IAAI;EAClBC,OAAO,EAAE,mBAAM,CAAC;AAClB,CAAC;;AAAC,IAKmBC,UAAU;EAmB7B,oBAAoBC,KAAsB,EAAE;IAAA;IAAA;IAAA,mDAjBtB,IAAIC,GAAG,EAAsB;IAkBjD,IAAI,CAACD,KAAK,qBAAON,aAAa,CAAC;IAC/B,IAAI,CAACQ,QAAQ,CAACF,KAAK,CAAC;IAEpB,IAAI,CAACG,WAAW,GAAG,IAAIF,GAAG,EAAE;EAC9B;;EAAC;IAAA;IAAA;IAMD,mBAAgB;MAAA,2CACW,IAAI,CAACE,WAAW,CAACC,MAAM,EAAE;QAAA;MAAA;QAAlD,oDAAoD;UAAA,IAAzCC,UAAU;UACnBA,UAAU,CAACC,OAAO,EAAE;QACtB;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAI,CAACH,WAAW,GAAG,IAAIF,GAAG,EAAsB;IAClD;;EAAC;IAAA;IAAA;IAMD,kBAASD,KAAsB,EAAQ;MACrC,IAAI,CAACA,KAAK,mCAAO,IAAI,CAACA,KAAK,GAAKA,KAAK,CAAC;MAAC,4CAEd,IAAI,CAACG,WAAW,CAACC,MAAM,EAAE;QAAA;MAAA;QAAlD,uDAAoD;UAAA,IAAzCC,UAAU;UACnBA,UAAU,CAACH,QAAQ,CAAC,IAAI,CAACK,mBAAmB,EAAE,CAAC;QACjD;MAAC;QAAA;MAAA;QAAA;MAAA;IACH;;EAAC;IAAA;IAAA;IAWD,uBAAcC,OAAsD,EAAc;MAChF,IAAOC,IAAI,GAAiBD,OAAO,CAA5BC,IAAI;QAAEC,MAAM,GAASF,OAAO,CAAtBE,MAAM;QAAEC,GAAG,GAAIH,OAAO,CAAdG,GAAG;MACxB,IAAIN,UAAU,GAAG,IAAI,CAACF,WAAW,CAACS,GAAG,CAACH,IAAI,CAAC;MAC3C,IAAI,CAACJ,UAAU,EAAE;QACfA,UAAU,GAAG,IAAIQ,mBAAU,CAAC;UAC1BJ,IAAI,EAAJA,IAAI;UACJC,MAAM,EAANA,MAAM;UACNC,GAAG,EAAHA;QACF,CAAC,CAAC;QACFN,UAAU,CAACH,QAAQ,CAAC,IAAI,CAACK,mBAAmB,EAAE,CAAC;QAC/C,IAAI,CAACJ,WAAW,CAACW,GAAG,CAACL,IAAI,EAAEJ,UAAU,CAAC;MACxC;MACA,OAAOA,UAAU;IACnB;EAAC;IAAA;IAAA,OAED,+BAAsB;MACpB,OAAO;QACLV,cAAc,EAAE,IAAI,CAACK,KAAK,CAACL,cAAc;QACzCC,oBAAoB,EAAE,IAAI,CAACI,KAAK,CAACJ,oBAAoB;QACrDC,YAAY,EAAE,IAAI,CAACG,KAAK,CAACH,YAAY;QACrCC,OAAO,EAAE,IAAI,CAACE,KAAK,CAACF;MACtB,CAAC;IACH;EAAC;IAAA;IAAA;;IAzED,uBAA8B;MAC5B,OAAOiB,qBAAY,CAACC,WAAW,EAAE;IACnC;;EAAC;IAAA;IAAA;IAGD,yBAA8D;MAAA,IAAzChB,KAAsB,uEAAG,CAAC,CAAC;MAC9CD,UAAU,CAACkB,WAAW,GAAGlB,UAAU,CAACkB,WAAW,IAAI,IAAIlB,UAAU,CAAC,CAAC,CAAC,CAAC;MACrEA,UAAU,CAACkB,WAAW,CAACf,QAAQ,CAACF,KAAK,CAAC;MACtC,OAAOD,UAAU,CAACkB,WAAW;IAC/B;;EAAC;EAAA;AAAA;AAAA;AAAA,8BAhBkBlB,UAAU"}