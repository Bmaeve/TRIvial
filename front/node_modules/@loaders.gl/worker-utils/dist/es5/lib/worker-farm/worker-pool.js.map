{"version":3,"file":"worker-pool.js","names":["WorkerPool","props","source","url","setProps","idleQueue","forEach","worker","destroy","isDestroyed","name","undefined","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","onMessage","job","type","data","done","onError","error","startPromise","Promise","onStart","jobQueue","push","_startQueuedJob","length","workerThread","_getAvailableWorker","queuedJob","shift","message","backlog","WorkerJob","payload","result","returnWorkerToQueue","shouldDestroyWorker","count","_getMaxConcurrency","toLowerCase","WorkerThread","isMobile","isSupported"],"sources":["../../../../src/lib/worker-farm/worker-pool.ts"],"sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {isMobile} from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\n/** WorkerPool onDebug Callback Parameters */\ntype OnDebugParameters = {\n  message: string;\n  worker: string;\n  name: string;\n  job: string;\n  backlog: number;\n  workerThread: WorkerThread;\n};\n\n/** WorkerPool Properties */\nexport type WorkerPoolProps = {\n  name?: string;\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  onDebug?: (options: OnDebugParameters) => any;\n  reuseWorkers?: boolean;\n};\n\n/** Private helper types */\ntype OnMessage = (job: WorkerJob, type: WorkerMessageType, payload: WorkerMessagePayload) => void;\ntype OnError = (job: WorkerJob, error: Error) => void;\n\ntype QueuedJob = {\n  name: string;\n  onMessage: OnMessage;\n  onError: OnError;\n  onStart: (value: any) => void; // Resolve job start promise\n};\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  name: string = 'unnamed';\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency: number = 1;\n  maxMobileConcurrency: number = 1;\n  onDebug: (options: OnDebugParameters) => any = () => {};\n  reuseWorkers: boolean = true;\n\n  private props: WorkerPoolProps = {};\n  private jobQueue: QueuedJob[] = [];\n  private idleQueue: WorkerThread[] = [];\n  private count = 0;\n  private isDestroyed = false;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /**\n   * @param processor - worker function\n   * @param maxConcurrency - max count of workers\n   */\n  constructor(props: WorkerPoolProps) {\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach((worker) => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  setProps(props: WorkerPoolProps) {\n    this.props = {...this.props, ...props};\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  async startJob(\n    name: string,\n    onMessage: OnMessage = (job, type, data) => job.done(data),\n    onError: OnError = (job, error) => job.error(error)\n  ): Promise<WorkerJob> {\n    // Promise resolves when thread starts working on this job\n    const startPromise = new Promise<WorkerJob>((onStart) => {\n      // Promise resolves when thread completes or fails working on this job\n      this.jobQueue.push({name, onMessage, onError, onStart});\n      return this;\n    });\n    this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    return await startPromise;\n  }\n\n  // PRIVATE\n\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  async _startQueuedJob(): Promise<void> {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      // Emit a debug event\n      // @ts-ignore\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      // Create a worker job to let the app access thread and manage job completion\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      // Set the worker thread's message handlers\n      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = (error) => queuedJob.onError(job, error);\n\n      // Resolve the start promise so that the app can start sending messages to worker\n      queuedJob.onStart(job);\n\n      // Wait for the app to signal that the job is complete, then return worker to queue\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   * @param worker\n   */\n  returnWorkerToQueue(worker: WorkerThread) {\n    const shouldDestroyWorker =\n      this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n  }\n\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  _getAvailableWorker(): WorkerThread | null {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({name, source: this.source, url: this.url});\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n"],"mappings":";;;;;;;;;;;;AACA;AACA;AACA;AAAqC;AAAA;AAAA,IAqChBA,UAAU;EAwB7B,oBAAYC,KAAsB,EAAE;IAAA;IAAA,4CAvBrB,SAAS;IAAA;IAAA;IAAA,sDAGC,CAAC;IAAA,4DACK,CAAC;IAAA,+CACe,YAAM,CAAC,CAAC;IAAA,oDAC/B,IAAI;IAAA,6CAEK,CAAC,CAAC;IAAA,gDACH,EAAE;IAAA,iDACE,EAAE;IAAA,6CACtB,CAAC;IAAA,mDACK,KAAK;IAYzB,IAAI,CAACC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAC1B,IAAI,CAACC,GAAG,GAAGF,KAAK,CAACE,GAAG;IACpB,IAAI,CAACC,QAAQ,CAACH,KAAK,CAAC;EACtB;;EAAC;IAAA;IAAA;IAMD,mBAAgB;MAEd,IAAI,CAACI,SAAS,CAACC,OAAO,CAAC,UAACC,MAAM;QAAA,OAAKA,MAAM,CAACC,OAAO,EAAE;MAAA,EAAC;MACpD,IAAI,CAACC,WAAW,GAAG,IAAI;IACzB;EAAC;IAAA;IAAA,OAED,kBAASR,KAAsB,EAAE;MAC/B,IAAI,CAACA,KAAK,mCAAO,IAAI,CAACA,KAAK,GAAKA,KAAK,CAAC;MAEtC,IAAIA,KAAK,CAACS,IAAI,KAAKC,SAAS,EAAE;QAC5B,IAAI,CAACD,IAAI,GAAGT,KAAK,CAACS,IAAI;MACxB;MACA,IAAIT,KAAK,CAACW,cAAc,KAAKD,SAAS,EAAE;QACtC,IAAI,CAACC,cAAc,GAAGX,KAAK,CAACW,cAAc;MAC5C;MACA,IAAIX,KAAK,CAACY,oBAAoB,KAAKF,SAAS,EAAE;QAC5C,IAAI,CAACE,oBAAoB,GAAGZ,KAAK,CAACY,oBAAoB;MACxD;MACA,IAAIZ,KAAK,CAACa,YAAY,KAAKH,SAAS,EAAE;QACpC,IAAI,CAACG,YAAY,GAAGb,KAAK,CAACa,YAAY;MACxC;MACA,IAAIb,KAAK,CAACc,OAAO,KAAKJ,SAAS,EAAE;QAC/B,IAAI,CAACI,OAAO,GAAGd,KAAK,CAACc,OAAO;MAC9B;IACF;EAAC;IAAA;IAAA;MAAA,0EAED,iBACEL,IAAY;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;UAAA;YAAA;cAAA;gBACZM,SAAoB,2DAAG,UAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI;kBAAA,OAAKF,GAAG,CAACG,IAAI,CAACD,IAAI,CAAC;gBAAA;gBAC1DE,OAAgB,2DAAG,UAACJ,GAAG,EAAEK,KAAK;kBAAA,OAAKL,GAAG,CAACK,KAAK,CAACA,KAAK,CAAC;gBAAA;gBAG7CC,YAAY,GAAG,IAAIC,OAAO,CAAY,UAACC,OAAO,EAAK;kBAEvD,KAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;oBAACjB,IAAI,EAAJA,IAAI;oBAAEM,SAAS,EAATA,SAAS;oBAAEK,OAAO,EAAPA,OAAO;oBAAEI,OAAO,EAAPA;kBAAO,CAAC,CAAC;kBACvD,OAAO,KAAI;gBACb,CAAC,CAAC;gBACF,IAAI,CAACG,eAAe,EAAE;gBAAC;gBAAA,OACVL,YAAY;cAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,iFAQD;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,IAAI,CAACG,QAAQ,CAACG,MAAM;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAInBC,YAAY,GAAG,IAAI,CAACC,mBAAmB,EAAE;gBAAA,IAC1CD,YAAY;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAKXE,SAAS,GAAG,IAAI,CAACN,QAAQ,CAACO,KAAK,EAAE;gBAAA,KACnCD,SAAS;kBAAA;kBAAA;gBAAA;gBAGX,IAAI,CAACjB,OAAO,CAAC;kBACXmB,OAAO,EAAE,cAAc;kBACvBxB,IAAI,EAAEsB,SAAS,CAACtB,IAAI;kBACpBoB,YAAY,EAAZA,YAAY;kBACZK,OAAO,EAAE,IAAI,CAACT,QAAQ,CAACG;gBACzB,CAAC,CAAC;;gBAGIZ,IAAG,GAAG,IAAImB,kBAAS,CAACJ,SAAS,CAACtB,IAAI,EAAEoB,YAAY,CAAC;gBAGvDA,YAAY,CAACd,SAAS,GAAG,UAACG,IAAI;kBAAA,OAAKa,SAAS,CAAChB,SAAS,CAACC,IAAG,EAAEE,IAAI,CAACD,IAAI,EAAEC,IAAI,CAACkB,OAAO,CAAC;gBAAA;gBACpFP,YAAY,CAACT,OAAO,GAAG,UAACC,KAAK;kBAAA,OAAKU,SAAS,CAACX,OAAO,CAACJ,IAAG,EAAEK,KAAK,CAAC;gBAAA;;gBAG/DU,SAAS,CAACP,OAAO,CAACR,IAAG,CAAC;;gBAAC;gBAAA;gBAAA,OAIfA,IAAG,CAACqB,MAAM;cAAA;gBAAA;gBAEhB,IAAI,CAACC,mBAAmB,CAACT,YAAY,CAAC;gBAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAG5C;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;IAUD,6BAAoBvB,MAAoB,EAAE;MACxC,IAAMiC,mBAAmB,GACvB,IAAI,CAAC/B,WAAW,IAAI,CAAC,IAAI,CAACK,YAAY,IAAI,IAAI,CAAC2B,KAAK,GAAG,IAAI,CAACC,kBAAkB,EAAE;MAElF,IAAIF,mBAAmB,EAAE;QACvBjC,MAAM,CAACC,OAAO,EAAE;QAChB,IAAI,CAACiC,KAAK,EAAE;MACd,CAAC,MAAM;QACL,IAAI,CAACpC,SAAS,CAACsB,IAAI,CAACpB,MAAM,CAAC;MAC7B;MAEA,IAAI,CAAC,IAAI,CAACE,WAAW,EAAE;QACrB,IAAI,CAACmB,eAAe,EAAE;MACxB;IACF;;EAAC;IAAA;IAAA;IAKD,+BAA2C;MAEzC,IAAI,IAAI,CAACvB,SAAS,CAACwB,MAAM,GAAG,CAAC,EAAE;QAC7B,OAAO,IAAI,CAACxB,SAAS,CAAC4B,KAAK,EAAE,IAAI,IAAI;MACvC;;MAGA,IAAI,IAAI,CAACQ,KAAK,GAAG,IAAI,CAACC,kBAAkB,EAAE,EAAE;QAC1C,IAAI,CAACD,KAAK,EAAE;QACZ,IAAM/B,IAAI,aAAM,IAAI,CAACA,IAAI,CAACiC,WAAW,EAAE,gBAAM,IAAI,CAACF,KAAK,iBAAO,IAAI,CAAC7B,cAAc,MAAG;QACpF,OAAO,IAAIgC,qBAAY,CAAC;UAAClC,IAAI,EAAJA,IAAI;UAAER,MAAM,EAAE,IAAI,CAACA,MAAM;UAAEC,GAAG,EAAE,IAAI,CAACA;QAAG,CAAC,CAAC;MACrE;;MAGA,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,8BAAqB;MACnB,OAAO0C,iBAAQ,GAAG,IAAI,CAAChC,oBAAoB,GAAG,IAAI,CAACD,cAAc;IACnE;EAAC;IAAA;IAAA;;IAxJD,uBAA8B;MAC5B,OAAOgC,qBAAY,CAACE,WAAW,EAAE;IACnC;;EAAC;EAAA;AAAA;AAAA"}