{"version":3,"file":"worker-job.js","names":["WorkerJob","jobName","workerThread","name","result","Promise","resolve","reject","_resolve","_reject","type","payload","postMessage","source","value","assert","isRunning","error"],"sources":["../../../../src/lib/worker-farm/worker-job.ts"],"sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean = true;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void = () => {};\n  private _reject: (reason?: any) => void = () => {};\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value: any): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error: Error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"],"mappings":";;;;;;;;;;AAEA;AAA2C,IAKtBA,SAAS;;EAU5B,mBAAYC,OAAe,EAAEC,YAA0B,EAAE;IAAA;IAAA;IAAA;IAAA;IAAA,iDAPpC,IAAI;IAAA;IAAA,gDAIgB,YAAM,CAAC,CAAC;IAAA,+CACP,YAAM,CAAC,CAAC;IAGhD,IAAI,CAACC,IAAI,GAAGF,OAAO;IACnB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,MAAM,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MAC7C,KAAI,CAACC,QAAQ,GAAGF,OAAO;MACvB,KAAI,CAACG,OAAO,GAAGF,MAAM;IACvB,CAAC,CAAC;EACJ;;EAAC;IAAA;IAAA;IAMD,qBAAYG,IAAuB,EAAEC,OAA6B,EAAQ;MACxE,IAAI,CAACT,YAAY,CAACU,WAAW,CAAC;QAC5BC,MAAM,EAAE,YAAY;QACpBH,IAAI,EAAJA,IAAI;QACJC,OAAO,EAAPA;MACF,CAAC,CAAC;IACJ;;EAAC;IAAA;IAAA;IAKD,cAAKG,KAAU,EAAQ;MACrB,IAAAC,cAAM,EAAC,IAAI,CAACC,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACR,QAAQ,CAACM,KAAK,CAAC;IACtB;;EAAC;IAAA;IAAA;IAKD,eAAMG,MAAY,EAAQ;MACxB,IAAAF,cAAM,EAAC,IAAI,CAACC,SAAS,CAAC;MACtB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAACP,OAAO,CAACQ,MAAK,CAAC;IACrB;EAAC;EAAA;AAAA;AAAA"}