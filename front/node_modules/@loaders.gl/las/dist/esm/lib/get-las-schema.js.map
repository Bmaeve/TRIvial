{"version":3,"file":"get-las-schema.js","names":["deduceMeshSchema","getLASSchema","lasHeader","attributes","metadataMap","makeMetadataFromLasHeader","schema","Map","set","pointsOffset","toString","pointsFormatId","pointsStructSize","pointsCount","JSON","stringify","scale","offset","maxs","undefined","mins","totalToRead","totalRead","versionAsString","isCompressed"],"sources":["../../../src/lib/get-las-schema.ts"],"sourcesContent":["import {Schema, MeshAttributes, deduceMeshSchema} from '@loaders.gl/schema';\nimport type {LASHeader} from './las-types';\n\n/**\n * Gets schema from PLY header\n * @param lasHeader\n * @param metadata\n * @returns Schema\n */\nexport function getLASSchema(lasHeader: LASHeader, attributes: MeshAttributes): Schema {\n  const metadataMap = makeMetadataFromLasHeader(lasHeader);\n  const schema = deduceMeshSchema(attributes, metadataMap);\n  return schema;\n}\n\n/**\n * Make arrow like schema metadata by LASHeader properties\n * @param lasHeader\n * @returns\n */\nexport function makeMetadataFromLasHeader(lasHeader: LASHeader): Map<string, string> {\n  const metadataMap = new Map();\n  metadataMap.set('las_pointsOffset', lasHeader.pointsOffset.toString(10));\n  metadataMap.set('las_pointsFormatId', lasHeader.pointsFormatId.toString(10));\n  metadataMap.set('las_pointsStructSize', lasHeader.pointsStructSize.toString(10));\n  metadataMap.set('las_pointsCount', lasHeader.pointsCount.toString(10));\n  metadataMap.set('las_scale', JSON.stringify(lasHeader.scale));\n  metadataMap.set('las_offset', JSON.stringify(lasHeader.offset));\n  if (lasHeader.maxs !== undefined) {\n    metadataMap.set('las_maxs', JSON.stringify(lasHeader.maxs));\n  }\n  if (lasHeader.mins !== undefined) {\n    metadataMap.set('las_mins', JSON.stringify(lasHeader.mins));\n  }\n  metadataMap.set('las_totalToRead', lasHeader.totalToRead.toString(10));\n  metadataMap.set('las_pointsFortotalReadmatId', lasHeader.totalRead.toString(10));\n  if (lasHeader.versionAsString !== undefined) {\n    metadataMap.set('las_versionAsString', lasHeader.versionAsString);\n  }\n  if (lasHeader.isCompressed !== undefined) {\n    metadataMap.set('las_isCompressed', lasHeader.isCompressed.toString());\n  }\n  return metadataMap;\n}\n"],"mappings":"AAAA,SAAgCA,gBAAgB,QAAO,oBAAoB;AAS3E,OAAO,SAASC,YAAY,CAACC,SAAoB,EAAEC,UAA0B,EAAU;EACrF,MAAMC,WAAW,GAAGC,yBAAyB,CAACH,SAAS,CAAC;EACxD,MAAMI,MAAM,GAAGN,gBAAgB,CAACG,UAAU,EAAEC,WAAW,CAAC;EACxD,OAAOE,MAAM;AACf;;AAOA,OAAO,SAASD,yBAAyB,CAACH,SAAoB,EAAuB;EACnF,MAAME,WAAW,GAAG,IAAIG,GAAG,EAAE;EAC7BH,WAAW,CAACI,GAAG,CAAC,kBAAkB,EAAEN,SAAS,CAACO,YAAY,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC;EACxEN,WAAW,CAACI,GAAG,CAAC,oBAAoB,EAAEN,SAAS,CAACS,cAAc,CAACD,QAAQ,CAAC,EAAE,CAAC,CAAC;EAC5EN,WAAW,CAACI,GAAG,CAAC,sBAAsB,EAAEN,SAAS,CAACU,gBAAgB,CAACF,QAAQ,CAAC,EAAE,CAAC,CAAC;EAChFN,WAAW,CAACI,GAAG,CAAC,iBAAiB,EAAEN,SAAS,CAACW,WAAW,CAACH,QAAQ,CAAC,EAAE,CAAC,CAAC;EACtEN,WAAW,CAACI,GAAG,CAAC,WAAW,EAAEM,IAAI,CAACC,SAAS,CAACb,SAAS,CAACc,KAAK,CAAC,CAAC;EAC7DZ,WAAW,CAACI,GAAG,CAAC,YAAY,EAAEM,IAAI,CAACC,SAAS,CAACb,SAAS,CAACe,MAAM,CAAC,CAAC;EAC/D,IAAIf,SAAS,CAACgB,IAAI,KAAKC,SAAS,EAAE;IAChCf,WAAW,CAACI,GAAG,CAAC,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACb,SAAS,CAACgB,IAAI,CAAC,CAAC;EAC7D;EACA,IAAIhB,SAAS,CAACkB,IAAI,KAAKD,SAAS,EAAE;IAChCf,WAAW,CAACI,GAAG,CAAC,UAAU,EAAEM,IAAI,CAACC,SAAS,CAACb,SAAS,CAACkB,IAAI,CAAC,CAAC;EAC7D;EACAhB,WAAW,CAACI,GAAG,CAAC,iBAAiB,EAAEN,SAAS,CAACmB,WAAW,CAACX,QAAQ,CAAC,EAAE,CAAC,CAAC;EACtEN,WAAW,CAACI,GAAG,CAAC,6BAA6B,EAAEN,SAAS,CAACoB,SAAS,CAACZ,QAAQ,CAAC,EAAE,CAAC,CAAC;EAChF,IAAIR,SAAS,CAACqB,eAAe,KAAKJ,SAAS,EAAE;IAC3Cf,WAAW,CAACI,GAAG,CAAC,qBAAqB,EAAEN,SAAS,CAACqB,eAAe,CAAC;EACnE;EACA,IAAIrB,SAAS,CAACsB,YAAY,KAAKL,SAAS,EAAE;IACxCf,WAAW,CAACI,GAAG,CAAC,kBAAkB,EAAEN,SAAS,CAACsB,YAAY,CAACd,QAAQ,EAAE,CAAC;EACxE;EACA,OAAON,WAAW;AACpB"}