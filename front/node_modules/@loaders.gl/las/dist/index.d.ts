import type { LoaderWithParser } from '@loaders.gl/loader-utils';
import type { LASLoaderOptions } from './las-loader';
import { LASLoader as LASWorkerLoader } from './las-loader';
export type { LASLoaderOptions };
export { LASWorkerLoader };
/**
 * Loader for the LAS (LASer) point cloud format
 */
export declare const LASLoader: {
    parse: (arrayBuffer: ArrayBuffer, options?: LASLoaderOptions) => Promise<import("./lib/las-types").LASMesh | import("@loaders.gl/schema").ArrowTable | import("@loaders.gl/schema").ColumnarTable>;
    parseSync: (arrayBuffer: ArrayBuffer, options?: LASLoaderOptions) => import("./lib/las-types").LASMesh | import("@loaders.gl/schema").ArrowTable | import("@loaders.gl/schema").ColumnarTable;
    name: string;
    id: string;
    module: string;
    version: any;
    worker: boolean;
    extensions: string[];
    mimeTypes: string[];
    text: boolean;
    binary: boolean;
    tests: string[];
    options: LASLoaderOptions;
};
export declare const _typecheckLoader: LoaderWithParser;
//# sourceMappingURL=index.d.ts.map