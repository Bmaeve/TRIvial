{"version":3,"file":"parse-las.js","names":["parseLAS","arrayBuffer","options","parseLASMesh","pointIndex","positions","colors","intensities","classifications","originalHeader","lasMesh","loader","loaderData","schema","Schema","header","vertexCount","boundingBox","attributes","topology","mode","parseLASChunked","las","skip","decoder","lasHeader","total","totalToRead","PositionsType","fp64","Float64Array","Float32Array","pointsFormatId","Uint8Array","Uint16Array","POSITION","value","size","intensity","classification","COLOR_0","batchSize","pointsCount","scale","scaleX","scaleY","scaleZ","offset","offsetX","offsetY","offsetZ","twoByteColor","detectTwoByteColors","colorDepth","i","getPoint","position","color","meshBatch","totalRead","progress","onProgress","getMeshBoundingBox","getLASSchema","rawData","onParseData","dataHandler","LASFile","open","getHeader","Unpacker","getUnpacker","Math","ceil","max","chunk","readData","count","versionAsString","isCompressed","unpacker","buffer","hasMoreData","e","close","console","warn"],"sources":["../../../src/lib/parse-las.ts"],"sourcesContent":["// ported and es6-ified from https://github.com/verma/plasio/\nimport type {ArrowTable, ColumnarTable} from '@loaders.gl/schema';\nimport type {LASLoaderOptions} from '../las-loader';\nimport type {LASMesh, LASHeader} from './las-types';\nimport {Schema, getMeshBoundingBox /* , convertMesh */} from '@loaders.gl/schema';\nimport {LASFile} from './laslaz-decoder';\nimport {getLASSchema} from './get-las-schema';\n\ntype LASChunk = {\n  count: number;\n  buffer: ArrayBuffer;\n  hasMoreData: boolean;\n  versionAsString?: string;\n  isCompressed?: boolean;\n};\n\n/**\n * Parsing of .las file\n * @param arrayBuffer\n * @param options\n * @returns LASHeader\n */\nexport default function parseLAS(\n  arrayBuffer: ArrayBuffer,\n  options?: LASLoaderOptions\n): LASMesh | ArrowTable | ColumnarTable {\n  return parseLASMesh(arrayBuffer, options);\n  // This code breaks pointcloud example on the website\n  // const mesh = parseLASMesh(arrayBuffer, options);\n  // return convertMesh(mesh, options?.las?.shape || 'mesh') as LASMesh | ArrowTable | ColumnarTable;\n}\n\n/**\n * Parsing of .las file\n * @param arrayBuffer\n * @param options\n * @returns LASHeader\n */\nfunction parseLASMesh(arrayBuffer: ArrayBuffer, options: LASLoaderOptions = {}): LASMesh {\n  let pointIndex: number = 0;\n\n  let positions: Float32Array | Float64Array;\n  let colors: Uint8Array | null;\n  let intensities: Uint16Array;\n  let classifications: Uint8Array;\n  let originalHeader: any;\n\n  const lasMesh: LASMesh = {\n    loader: 'las',\n    loaderData: {} as LASHeader,\n    // shape: 'mesh',\n    schema: new Schema([]),\n    header: {\n      vertexCount: 0,\n      boundingBox: [\n        [0, 0, 0],\n        [0, 0, 0]\n      ]\n    },\n    attributes: {},\n    topology: 'point-list',\n    mode: 0 // GL.POINTS\n  };\n\n  /* eslint-disable max-statements */\n  // @ts-ignore Possibly undefined\n  parseLASChunked(arrayBuffer, options.las?.skip, (decoder: any = {}, lasHeader: LASHeader) => {\n    if (!originalHeader) {\n      originalHeader = lasHeader;\n      const total = lasHeader.totalToRead;\n\n      const PositionsType = options.las?.fp64 ? Float64Array : Float32Array;\n      positions = new PositionsType(total * 3);\n      // laslaz-decoder.js `pointFormatReaders`\n      colors = lasHeader.pointsFormatId >= 2 ? new Uint8Array(total * 4) : null;\n      intensities = new Uint16Array(total);\n      classifications = new Uint8Array(total);\n\n      lasMesh.loaderData = lasHeader;\n      lasMesh.attributes = {\n        POSITION: {value: positions, size: 3},\n        // non-gltf attributes, use non-capitalized names for now\n        intensity: {value: intensities, size: 1},\n        classification: {value: classifications, size: 1}\n      };\n\n      if (colors) {\n        lasMesh.attributes.COLOR_0 = {value: colors, size: 4};\n      }\n    }\n\n    const batchSize = decoder.pointsCount;\n    const {\n      scale: [scaleX, scaleY, scaleZ],\n      offset: [offsetX, offsetY, offsetZ]\n    } = lasHeader;\n\n    const twoByteColor = detectTwoByteColors(decoder, batchSize, options.las?.colorDepth);\n\n    for (let i = 0; i < batchSize; i++) {\n      const {position, color, intensity, classification} = decoder.getPoint(i);\n\n      positions[pointIndex * 3] = position[0] * scaleX + offsetX;\n      positions[pointIndex * 3 + 1] = position[1] * scaleY + offsetY;\n      positions[pointIndex * 3 + 2] = position[2] * scaleZ + offsetZ;\n\n      if (color && colors) {\n        if (twoByteColor) {\n          colors[pointIndex * 4] = color[0] / 256;\n          colors[pointIndex * 4 + 1] = color[1] / 256;\n          colors[pointIndex * 4 + 2] = color[2] / 256;\n        } else {\n          colors[pointIndex * 4] = color[0];\n          colors[pointIndex * 4 + 1] = color[1];\n          colors[pointIndex * 4 + 2] = color[2];\n        }\n        colors[pointIndex * 4 + 3] = 255;\n      }\n\n      intensities[pointIndex] = intensity;\n      classifications[pointIndex] = classification;\n\n      pointIndex++;\n    }\n\n    const meshBatch = {\n      ...lasMesh,\n      header: {\n        vertexCount: lasHeader.totalRead\n      },\n      progress: lasHeader.totalRead / lasHeader.totalToRead\n    };\n\n    options?.onProgress?.(meshBatch);\n  });\n  /* eslint-enable max-statements */\n\n  lasMesh.header = {\n    vertexCount: originalHeader.totalToRead,\n    boundingBox: getMeshBoundingBox(lasMesh?.attributes || {})\n  };\n\n  if (lasMesh) {\n    lasMesh.schema = getLASSchema(lasMesh.loaderData, lasMesh.attributes);\n  }\n  return lasMesh;\n}\n\n/**\n * parse laz data\n * @param rawData\n * @param skip\n * @param onParseData\n * @return parsed point cloud\n */\n/* eslint-enable max-statements */\nexport function parseLASChunked(rawData: ArrayBuffer, skip: number, onParseData: any = {}): void {\n  const dataHandler = new LASFile(rawData);\n\n  try {\n    // open data\n    dataHandler.open();\n\n    const header = dataHandler.getHeader();\n    // start loading\n    const Unpacker = dataHandler.getUnpacker();\n\n    const totalToRead = Math.ceil(header.pointsCount / Math.max(1, skip));\n    header.totalToRead = totalToRead;\n    let totalRead = 0;\n\n    /* eslint-disable no-constant-condition */\n    while (true) {\n      const chunk: LASChunk = dataHandler.readData(1000 * 100, 0, skip);\n\n      totalRead += chunk.count;\n\n      header.totalRead = totalRead;\n      header.versionAsString = chunk.versionAsString;\n      header.isCompressed = chunk.isCompressed;\n\n      const unpacker = new Unpacker(chunk.buffer, chunk.count, header);\n\n      // surface unpacker and progress via call back\n      // use unpacker.pointsCount and unpacker.getPoint(i) to handle data in app\n      onParseData(unpacker, header);\n\n      if (!chunk.hasMoreData || totalRead >= totalToRead) {\n        break;\n      }\n    }\n  } catch (e) {\n    throw e;\n  } finally {\n    dataHandler.close();\n  }\n}\n\n/**\n * @param decoder\n * @param batchSize\n * @param colorDepth\n * @returns boolean\n */\nfunction detectTwoByteColors(\n  decoder: any = {},\n  batchSize: number,\n  colorDepth?: number | string\n): boolean {\n  let twoByteColor = false;\n  switch (colorDepth) {\n    case 8:\n      twoByteColor = false;\n      break;\n    case 16:\n      twoByteColor = true;\n      break;\n    case 'auto':\n      if (decoder.getPoint(0).color) {\n        for (let i = 0; i < batchSize; i++) {\n          const {color} = decoder.getPoint(i);\n          // eslint-disable-next-line max-depth\n          if (color[0] > 255 || color[1] > 255 || color[2] > 255) {\n            twoByteColor = true;\n          }\n        }\n      }\n      break;\n    default:\n      // eslint-disable-next-line\n      console.warn('las: illegal value for options.las.colorDepth');\n      break;\n  }\n  return twoByteColor;\n}\n"],"mappings":"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"}