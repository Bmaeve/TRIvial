{"version":3,"file":"schema.js","names":["assert","Schema","constructor","fields","metadata","Array","isArray","checkNames","Map","compareTo","other","length","i","select","nameMap","Object","create","columnNames","name","selectedFields","filter","field","selectAt","columnIndices","map","index","Boolean","assign","schemaOrFields","otherSchema","mergeMaps","fieldMap","mergedFields","values","usedNames","console","warn","m1","m2"],"sources":["../../../../../src/lib/schema/impl/schema.ts"],"sourcesContent":["import {assert} from '../../utils/assert';\nimport Field from './field';\n\nexport type SchemaMetadata = Map<string, any>;\n\n/**\n * ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport default class Schema {\n  fields: Field[];\n  // TODO - Arrow just allows Map<string, string>\n  metadata: SchemaMetadata;\n\n  constructor(fields: Field[], metadata?: SchemaMetadata) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: Schema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): Schema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): Schema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: Schema | Field[]): Schema {\n    let fields: Field[];\n    let metadata: SchemaMetadata = this.metadata;\n\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: Field} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields: Field[]): void {\n  const usedNames: Record<string, boolean> = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n"],"mappings":"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"}