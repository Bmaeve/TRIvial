{"version":3,"file":"columnar-table-batch-aggregator.js","names":["DEFAULT_ROW_COUNT","ColumnarTableBatchAggregator","schema","options","_reallocateColumns","length","row","i","fieldName","columns","_pruneColumns","Array","isArray","field","name","index","batch","shape","batchType","data","allocated","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","Object","entries","columnName","column","slice"],"sources":["../../../../src/lib/batches/columnar-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n"],"mappings":"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"}