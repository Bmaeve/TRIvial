{"version":3,"file":"base-table-batch-aggregator.js","names":["DEFAULT_ROW_COUNT","RowTableBatchAggregator","schema","options","Array","isArray","_headers","key","index","name","length","row","cursor","Number","isFinite","rows","slice","batch","shape","batchType","data"],"sources":["../../../../src/lib/batches/base-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  rows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.rows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n\n    const batch: TableBatch = {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n\n    return batch;\n  }\n}\n"],"mappings":";;;;;;;;;;AAIA,IAAMA,iBAAiB,GAAG,GAAG;AAAC,IAETC,uBAAuB;EAS1C,iCAAYC,MAAc,EAAEC,OAA0B,EAAE;IAAA;IAAA;IAAA;IAAA,8CALvC,CAAC;IAAA,4CACG,IAAI;IAAA,8CACR,CAAC;IAAA,gDACW,EAAE;IAG7B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,MAAM,GAAGA,MAAM;;IAIpB,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;MAC1B,IAAI,CAACI,QAAQ,GAAG,EAAE;MAClB,KAAK,IAAMC,GAAG,IAAIL,MAAM,EAAE;QACxB,IAAI,CAACI,QAAQ,CAACJ,MAAM,CAACK,GAAG,CAAC,CAACC,KAAK,CAAC,GAAGN,MAAM,CAACK,GAAG,CAAC,CAACE,IAAI;MACrD;IACF;EACF;EAAC;IAAA;IAAA,OAED,oBAAmB;MACjB,OAAO,IAAI,CAACC,MAAM;IACpB;EAAC;IAAA;IAAA,OAED,qBAAYC,GAAU,EAAEC,MAAe,EAAQ;MAC7C,IAAIC,MAAM,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;QAC3B,IAAI,CAACA,MAAM,GAAGA,MAAgB;MAChC;MAEA,IAAI,CAACG,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,IAAIX,KAAK,CAACJ,iBAAiB,CAAC;MACrD,IAAI,CAACe,IAAI,CAAC,IAAI,CAACL,MAAM,CAAC,GAAGC,GAAG;MAC5B,IAAI,CAACD,MAAM,EAAE;IACf;EAAC;IAAA;IAAA,OAED,sBAAaC,GAAgC,EAAEC,MAAe,EAAQ;MACpE,IAAIC,MAAM,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;QAC3B,IAAI,CAACA,MAAM,GAAGA,MAAgB;MAChC;MAEA,IAAI,CAACG,IAAI,GAAG,IAAI,CAACA,IAAI,IAAI,IAAIX,KAAK,CAACJ,iBAAiB,CAAC;MACrD,IAAI,CAACe,IAAI,CAAC,IAAI,CAACL,MAAM,CAAC,GAAGC,GAAG;MAC5B,IAAI,CAACD,MAAM,EAAE;IACf;EAAC;IAAA;IAAA,OAED,oBAA8B;MAC5B,IAAIK,IAAI,GAAG,IAAI,CAACA,IAAI;MACpB,IAAI,CAACA,IAAI,EAAE;QACT,OAAO,IAAI;MACb;MAEAA,IAAI,GAAGA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAACN,MAAM,CAAC;MACjC,IAAI,CAACK,IAAI,GAAG,IAAI;MAEhB,IAAME,KAAiB,GAAG;QACxBC,KAAK,EAAE,IAAI,CAACf,OAAO,CAACe,KAAK;QACzBC,SAAS,EAAE,MAAM;QACjBC,IAAI,EAAEL,IAAI;QACVL,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBR,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBU,MAAM,EAAE,IAAI,CAACA;MACf,CAAC;MAED,OAAOK,KAAK;IACd;EAAC;EAAA;AAAA;AAAA"}