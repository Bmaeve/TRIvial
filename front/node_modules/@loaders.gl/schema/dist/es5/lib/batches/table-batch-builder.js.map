{"version":3,"file":"table-batch-builder.js","names":["DEFAULT_OPTIONS","shape","batchSize","batchDebounceMs","limit","_limitMB","ERR_MESSAGE","TableBatchBuilder","schema","options","Date","now","Boolean","totalLength","totalBytes","row","limitReached","rowBytes","_estimateRowMB","Array","isArray","addArrayRow","addObjectRow","aggregator","TableBatchType","_getTableBatchType","chunk","ArrayBuffer","bytesUsed","byteLength","length","isChunkComplete","_isFull","_getBatch","Object","keys","rowCount","lastBatchEmittedMs","normalizedBatch","getBatch","count","batchCount","assign","BaseTableBatchAggregator","RowTableBatchAggregator","ColumnarTableBatchAggregator","ArrowBatch","Error"],"sources":["../../../../src/lib/batches/table-batch-builder.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport type {TableBatchAggregator, TableBatchConstructor} from './table-batch-aggregator';\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\n\n// TODO define interface instead\ntype TableBatchBuilderOptions = {\n  shape: 'row-table' | 'array-row-table' | 'object-row-table' | 'columnar-table' | 'arrow-table';\n  batchSize?: number | 'auto';\n  batchDebounceMs?: number;\n  limit: number;\n  _limitMB: number;\n};\n\ntype GetBatchOptions = {\n  bytesUsed?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_OPTIONS: Required<TableBatchBuilderOptions> = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\n\nconst ERR_MESSAGE = 'TableBatchBuilder';\n\n/** Incrementally builds batches from a stream of rows */\nexport default class TableBatchBuilder {\n  schema: Schema;\n  options: Required<TableBatchBuilderOptions>;\n\n  private aggregator: TableBatchAggregator | null = null;\n  private batchCount: number = 0;\n  private bytesUsed: number = 0;\n  private isChunkComplete: boolean = false;\n  private lastBatchEmittedMs: number = Date.now();\n  private totalLength: number = 0;\n  private totalBytes: number = 0;\n  private rowBytes: number = 0;\n\n  static ArrowBatch?: TableBatchConstructor;\n\n  constructor(schema: Schema, options?: TableBatchBuilderOptions) {\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  limitReached(): boolean {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row: any[] | {[columnName: string]: any}): void {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n\n  /** Add one row to the batch */\n  protected addArrayRow(row: any[]) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n\n  /** Add one row to the batch */\n  protected addObjectRow(row: {[columnName: string]: any}): void {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk: ArrayBuffer | string): void {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n\n  getFullBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n\n  getFinalBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._getBatch(options);\n  }\n\n  // INTERNAL\n\n  _estimateRowMB(row: any[] | object): number {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n\n  private _isFull(): boolean {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  private _getBatch(options?: GetBatchOptions): TableBatch | null {\n    if (!this.aggregator) {\n      return null;\n    }\n\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch() as TableBatch;\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n\n  private _getTableBatchType(): TableBatchConstructor {\n    switch (this.options.shape) {\n      case 'row-table':\n        return BaseTableBatchAggregator;\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        throw new Error(ERR_MESSAGE);\n    }\n  }\n}\n"],"mappings":"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"}