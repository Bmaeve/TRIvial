{"version":3,"file":"schema.js","names":["Schema","fields","metadata","assert","Array","isArray","checkNames","Map","other","length","i","compareTo","nameMap","Object","create","columnNames","name","selectedFields","filter","field","columnIndices","map","index","Boolean","schemaOrFields","otherSchema","mergeMaps","fieldMap","mergedFields","values","usedNames","console","warn","m1","m2"],"sources":["../../../../../src/lib/schema/impl/schema.ts"],"sourcesContent":["import {assert} from '../../utils/assert';\nimport Field from './field';\n\nexport type SchemaMetadata = Map<string, any>;\n\n/**\n * ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport default class Schema {\n  fields: Field[];\n  // TODO - Arrow just allows Map<string, string>\n  metadata: SchemaMetadata;\n\n  constructor(fields: Field[], metadata?: SchemaMetadata) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: Schema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): Schema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): Schema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: Schema | Field[]): Schema {\n    let fields: Field[];\n    let metadata: SchemaMetadata = this.metadata;\n\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: Field} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields: Field[]): void {\n  const usedNames: Record<string, boolean> = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n"],"mappings":"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"}