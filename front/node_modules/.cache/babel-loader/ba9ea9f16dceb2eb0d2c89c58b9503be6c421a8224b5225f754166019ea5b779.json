{"ast":null,"code":"import { FileSource, THREE, proj4, Extent, PlanarView, WMSSource, ColorLayer, ElevationLayer, Style, FeatureGeometryLayer } from \"./itowns/dist/itowns\";\nexport default {\n  name: 'MyItowns',\n  mounted() {\n    // Retrieve the view container\n    const viewerDiv = document.getElementById('viewerDiv');\n\n    // Define the view geographic extent\n    proj4.defs('EPSG:2154', '+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs');\n    const viewExtent = new Extent('EPSG:2154', 644500.0, 659499.99, 6857500.0, 6867499.99);\n\n    // Define the camera initial placement\n    const placement = {\n      coord: viewExtent.center(),\n      tilt: 12,\n      heading: 40,\n      range: 16000\n    };\n\n    // Create the planar view\n    const view = new PlanarView(viewerDiv, viewExtent, {\n      placement: placement\n    });\n\n    // Define the source of the ortho-images\n    const sourceOrtho = new WMSSource({\n      url: \"https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/r/wms\",\n      name: \"HR.ORTHOIMAGERY.ORTHOPHOTOS\",\n      format: \"image/png\",\n      crs: 'EPSG:2154',\n      extent: viewExtent\n    });\n    // Create the ortho-images ColorLayer and add it to the view\n    const layerOrtho = new ColorLayer('Ortho', {\n      source: sourceOrtho\n    });\n    view.addLayer(layerOrtho);\n\n    // Define the source of the dem data\n    const sourceDEM = new WMSSource({\n      url: \"https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/r/wms\",\n      name: \"ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES\",\n      format: \"image/x-bil;bits=32\",\n      crs: 'EPSG:2154',\n      extent: viewExtent\n    });\n    // Create the dem ElevationLayer and add it to the view\n    const layerDEM = new ElevationLayer('DEM', {\n      source: sourceDEM\n    });\n    view.addLayer(layerDEM);\n\n    // Static Json solution\n\n    function setExtrusion(properties) {\n      return properties.HAUTEUR;\n    }\n    function setColor() {\n      return new THREE.Color(0xff0000);\n    }\n    const batsource = new FileSource({\n      url: \"http://localhost:3000/\",\n      crs: 'EPSG:2154',\n      format: 'application/json'\n    });\n    let basic = new FeatureGeometryLayer('basic', {\n      // Use a FileSource to load a single file once\n      source: batsource,\n      transparent: true,\n      opacity: 0.7,\n      //zoom: { min: 10 },\n      style: new Style({\n        fill: {\n          color: setColor,\n          base_altitude: 28,\n          extrusion_height: setExtrusion\n        }\n      })\n    });\n    view.addLayer(basic);\n\n    // Api rest solution  \n\n    fetch('http://localhost:3000/getBatis').then(res => res.json()).then(data => {\n      function setExtrusions(properties) {\n        return properties.hauteur;\n      }\n      let marne = new FeatureGeometryLayer('Marne', {\n        // Use a FileSource to load a single file once\n        source: new FileSource({\n          fetchedData: data,\n          crs: 'EPSG:2154',\n          format: 'application/json'\n        }),\n        transparent: true,\n        opacity: 0.7,\n        style: new Style({\n          fill: {\n            color: new THREE.Color(0xbbffbb),\n            base_altitude: 28,\n            extrusion_height: setExtrusions\n          }\n        })\n      });\n      view.addLayer(marne);\n    });\n  }\n};","map":{"version":3,"names":["FileSource","THREE","proj4","Extent","PlanarView","WMSSource","ColorLayer","ElevationLayer","Style","FeatureGeometryLayer","name","mounted","viewerDiv","document","getElementById","defs","viewExtent","placement","coord","center","tilt","heading","range","view","sourceOrtho","url","format","crs","extent","layerOrtho","source","addLayer","sourceDEM","layerDEM","setExtrusion","properties","HAUTEUR","setColor","Color","batsource","basic","transparent","opacity","style","fill","color","base_altitude","extrusion_height","fetch","then","res","json","data","setExtrusions","hauteur","marne","fetchedData"],"sources":["/home/jonathan/Downloads/TRIvial/FRONTS/src/components/Home/ITowns.vue"],"sourcesContent":["<template>\n  <div id=\"viewerDiv\">\n\n  </div>\n</template>\n\n<script>\nimport { FileSource, THREE, proj4, Extent, PlanarView, WMSSource, ColorLayer, ElevationLayer, Style, FeatureGeometryLayer } from \"./itowns/dist/itowns\";\n\nexport default {\n  name: 'MyItowns',\n  mounted() {\n    // Retrieve the view container\n    const viewerDiv = document.getElementById('viewerDiv');\n\n    // Define the view geographic extent\n    proj4.defs(\n      'EPSG:2154',\n      '+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n    );\n    const viewExtent = new Extent(\n      'EPSG:2154',\n      644500.0, 659499.99,\n      6857500.0, 6867499.99,\n    );\n\n    // Define the camera initial placement\n    const placement = {\n      coord: viewExtent.center(),\n      tilt: 12,\n      heading: 40,\n      range: 16000,\n    };\n\n    // Create the planar view\n    const view = new PlanarView(viewerDiv, viewExtent, {\n      placement: placement,\n    });\n\n    // Define the source of the ortho-images\n    const sourceOrtho = new WMSSource({\n      url: \"https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/r/wms\",\n      name: \"HR.ORTHOIMAGERY.ORTHOPHOTOS\",\n      format: \"image/png\",\n      crs: 'EPSG:2154',\n      extent: viewExtent,\n    });\n    // Create the ortho-images ColorLayer and add it to the view\n    const layerOrtho = new ColorLayer('Ortho', { source: sourceOrtho });\n    view.addLayer(layerOrtho);\n\n    // Define the source of the dem data\n    const sourceDEM = new WMSSource({\n      url: \"https://wxs.ign.fr/3ht7xcw6f7nciopo16etuqp2/geoportail/r/wms\",\n      name: \"ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES\",\n      format: \"image/x-bil;bits=32\",\n      crs: 'EPSG:2154',\n      extent: viewExtent,\n    });\n    // Create the dem ElevationLayer and add it to the view\n    const layerDEM = new ElevationLayer('DEM', { source: sourceDEM });\n    view.addLayer(layerDEM);\n\n\n// Static Json solution\n\n    function setExtrusion(properties) {\n      return properties.HAUTEUR;\n    }\n    function setColor() {\n      return new THREE.Color(0xff0000);\n    }\n    const batsource = new FileSource({\n      url: \"http://localhost:3000/\",\n      crs: 'EPSG:2154',\n      format: 'application/json',\n    });\n\n    let basic = new FeatureGeometryLayer('basic', {\n      // Use a FileSource to load a single file once\n      source: batsource,\n      transparent: true,\n      opacity: 0.7,\n      //zoom: { min: 10 },\n      style: new Style({\n        fill: {\n          color: setColor,\n          base_altitude: 28,\n          extrusion_height: setExtrusion,\n        }\n      })\n    });\n\n\n    view.addLayer(basic);\n\n\n\n\n// Api rest solution  \n\nfetch('http://localhost:3000/getBatis').then(res => res.json()).then(data =>{\n\nfunction setExtrusions(properties) {\nreturn properties.hauteur;\n}\n\nlet marne = new FeatureGeometryLayer('Marne', {\n          // Use a FileSource to load a single file once\n          source: new FileSource({\n            fetchedData: data,\n               crs: 'EPSG:2154',\n               format: 'application/json',\n           }),\n          transparent: true,\n          opacity: 0.7,\n          style: new Style({\n              fill: {\n                  color: new THREE.Color(0xbbffbb),\n                  base_altitude: 28,\n                  extrusion_height: setExtrusions,\n              }\n          })\n\n       });\n       view.addLayer(marne);\n})\n\n  }\n}\n</script>\n\n\n<style scoped>\n#viewerDiv {\n  margin: auto;\n  height: 800px;\n  width: 100%;\n  padding: 0;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}