{"version":3,"file":"parse-with-worker.js","names":["canParseWithWorker","loader","options","WorkerFarm","isSupported","isBrowser","_nodeWorkers","worker","parseWithWorker","data","context","parseOnMainThread","name","id","url","getWorkerURL","workerFarm","getWorkerFarm","workerPool","getWorkerPool","JSON","parse","stringify","startJob","onMessage","bind","job","postMessage","input","result","type","payload","done","error","Error","message","console","warn"],"sources":["../../../../src/lib/worker-loader-utils/parse-with-worker.ts"],"sourcesContent":["import {\n  WorkerJob,\n  WorkerMessageType,\n  WorkerMessagePayload,\n  isBrowser\n} from '@loaders.gl/worker-utils';\nimport type {Loader, LoaderOptions, LoaderContext} from '../../types';\nimport {WorkerFarm, getWorkerURL} from '@loaders.gl/worker-utils';\n\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canParseWithWorker(loader: Loader, options?: LoaderOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  // Node workers are still experimental\n  if (!isBrowser && !options?._nodeWorkers) {\n    return false;\n  }\n\n  return loader.worker && options?.worker;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.\n */\nexport async function parseWithWorker(\n  loader: Loader,\n  data: any,\n  options?: LoaderOptions,\n  context?: LoaderContext,\n  parseOnMainThread?: (arrayBuffer: ArrayBuffer, options: {[key: string]: any}) => Promise<void>\n) {\n  const name = loader.id; // TODO\n  const url = getWorkerURL(loader, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  // options.log object contains functions which cannot be transferred\n  // context.fetch & context.parse functions cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n\n  const job = await workerPool.startJob(\n    'process-on-worker',\n    // @ts-expect-error\n    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises\n  );\n\n  job.postMessage('process', {\n    // @ts-ignore\n    input: data,\n    options,\n    context\n  });\n\n  const result = await job.result;\n  // TODO - what is going on here?\n  return await result.result;\n}\n\n/**\n * Handle worker's responses to the main thread\n * @param job\n * @param type\n * @param payload\n */\nasync function onMessage(\n  parseOnMainThread: (arrayBuffer: ArrayBuffer, options?: {[key: string]: any}) => Promise<void>,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for main thread to parseO\n      const {id, input, options} = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`parse-with-worker unknown message ${type}`);\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA;AAcO,SAASA,kBAAkB,CAACC,MAAc,EAAEC,OAAuB,EAAE;EAC1E,IAAI,CAACC,uBAAU,CAACC,WAAW,EAAE,EAAE;IAC7B,OAAO,KAAK;EACd;;EAGA,IAAI,CAACC,sBAAS,IAAI,EAACH,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEI,YAAY,GAAE;IACxC,OAAO,KAAK;EACd;EAEA,OAAOL,MAAM,CAACM,MAAM,KAAIL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,MAAM;AACzC;;AAAC,SAMqBC,eAAe;EAAA;AAAA;AAAA;EAAA,6EAA9B,iBACLP,MAAc,EACdQ,IAAS,EACTP,OAAuB,EACvBQ,OAAuB,EACvBC,iBAA8F;IAAA;IAAA;MAAA;QAAA;UAAA;YAExFC,IAAI,GAAGX,MAAM,CAACY,EAAE;YAChBC,GAAG,GAAG,IAAAC,yBAAY,EAACd,MAAM,EAAEC,OAAO,CAAC;YAEnCc,UAAU,GAAGb,uBAAU,CAACc,aAAa,CAACf,OAAO,CAAC;YAC9CgB,UAAU,GAAGF,UAAU,CAACG,aAAa,CAAC;cAACP,IAAI,EAAJA,IAAI;cAAEE,GAAG,EAAHA;YAAG,CAAC,CAAC;YAKxDZ,OAAO,GAAGkB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpB,OAAO,CAAC,CAAC;YAC7CQ,OAAO,GAAGU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACZ,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;YAAC;YAAA,OAElCQ,UAAU,CAACK,QAAQ,CACnC,mBAAmB;YAEnBC,SAAS,CAACC,IAAI,CAAC,IAAI,EAAEd,iBAAiB,CAAC,CACxC;UAAA;YAJKe,GAAG;YAMTA,GAAG,CAACC,WAAW,CAAC,SAAS,EAAE;cAEzBC,KAAK,EAAEnB,IAAI;cACXP,OAAO,EAAPA,OAAO;cACPQ,OAAO,EAAPA;YACF,CAAC,CAAC;YAAC;YAAA,OAEkBgB,GAAG,CAACG,MAAM;UAAA;YAAzBA,MAAM;YAAA;YAAA,OAECA,MAAM,CAACA,MAAM;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC3B;EAAA;AAAA;AAAA,SAQcL,SAAS;EAAA;AAAA;AAAA;EAAA,uEAAxB,kBACEb,iBAA8F,EAC9Fe,GAAc,EACdI,IAAuB,EACvBC,OAA6B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,eAErBD,IAAI;YAAA,kCACL,MAAM,wBAIN,OAAO,wBAIP,SAAS;YAAA;UAAA;YAPZJ,GAAG,CAACM,IAAI,CAACD,OAAO,CAAC;YAAC;UAAA;YAIlBL,GAAG,CAACO,KAAK,CAAC,IAAIC,KAAK,CAACH,OAAO,CAACE,KAAK,CAAC,CAAC;YAAC;UAAA;YAK7BpB,EAAE,GAAoBkB,OAAO,CAA7BlB,EAAE,EAAEe,KAAK,GAAaG,OAAO,CAAzBH,KAAK,EAAE1B,QAAO,GAAI6B,OAAO,CAAlB7B,OAAO;YAAA;YAAA;YAAA,OAEFS,iBAAiB,CAACiB,KAAK,EAAE1B,QAAO,CAAC;UAAA;YAAhD2B,MAAM;YACZH,GAAG,CAACC,WAAW,CAAC,MAAM,EAAE;cAACd,EAAE,EAAFA,EAAE;cAAEgB,MAAM,EAANA;YAAM,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;YAEhCM,OAAO,GAAG,wBAAiBD,KAAK,GAAG,aAAMC,OAAO,GAAG,eAAe;YACxET,GAAG,CAACC,WAAW,CAAC,OAAO,EAAE;cAACd,EAAE,EAAFA,EAAE;cAAEoB,KAAK,EAAEE;YAAO,CAAC,CAAC;UAAC;YAAA;UAAA;YAMjDC,OAAO,CAACC,IAAI,6CAAsCP,IAAI,EAAG;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAE/D;EAAA;AAAA"}