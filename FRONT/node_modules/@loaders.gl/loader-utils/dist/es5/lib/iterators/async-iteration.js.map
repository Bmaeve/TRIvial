{"version":3,"file":"async-iteration.js","names":["forEach","iterator","visitor","next","done","value","return","cancel","concatenateArrayBuffersAsync","asyncIterator","arrayBuffers","chunk","push","concatenateArrayBuffers","concatenateStringsAsync","strings","join"],"sources":["../../../../src/lib/iterators/async-iteration.ts"],"sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\n\nexport async function concatenateArrayBuffersAsync(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n): Promise<ArrayBuffer> {\n  const arrayBuffers: ArrayBuffer[] = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n\nexport async function concatenateStringsAsync(\n  asyncIterator: AsyncIterable<string> | Iterable<string>\n): Promise<string> {\n  const strings: string[] = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n"],"mappings":";;;;;;;;;;;AAAA;AAA2E;AAAA;AAAA,SAgBrDA,OAAO;EAAA;AAAA;AAAA;EAAA,qEAAtB,iBAAuBC,QAAQ,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KAEtC,IAAI;cAAA;cAAA;YAAA;YAAA;YAAA,OACmBD,QAAQ,CAACE,IAAI,EAAE;UAAA;YAAA;YAApCC,IAAI,wBAAJA,IAAI;YAAEC,KAAK,wBAALA,KAAK;YAAA,KACdD,IAAI;cAAA;cAAA;YAAA;YACNH,QAAQ,CAACK,MAAM,EAAE;YAAC;UAAA;YAGdC,MAAM,GAAGL,OAAO,CAACG,KAAK,CAAC;YAAA,KACzBE,MAAM;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAIb;EAAA;AAAA;AAAA,SASqBC,4BAA4B;EAAA;AAAA;AAAA;EAAA,0FAA3C,kBACLC,aAAiE;IAAA;IAAA;MAAA;QAAA;UAAA;YAE3DC,YAA2B,GAAG,EAAE;YAAA;YAAA;YAAA;YAAA,2BACZD,aAAa;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAtBE,KAAK;YACpBD,YAAY,CAACE,IAAI,CAACD,KAAK,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAAA,kCAEpBE,yCAAuB,eAAIH,YAAY,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAChD;EAAA;AAAA;AAAA,SAEqBI,uBAAuB;EAAA;AAAA;AAAA;EAAA,qFAAtC,kBACLL,aAAuD;IAAA;IAAA;MAAA;QAAA;UAAA;YAEjDM,OAAiB,GAAG,EAAE;YAAA;YAAA;YAAA;YAAA,4BACFN,aAAa;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAtBE,KAAK;YACpBI,OAAO,CAACH,IAAI,CAACD,KAAK,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAAA,kCAEfI,OAAO,CAACC,IAAI,CAAC,EAAE,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACxB;EAAA;AAAA"}