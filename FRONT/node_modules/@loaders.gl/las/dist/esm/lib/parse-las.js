

import { Schema, getMeshBoundingBox } from '@loaders.gl/schema';
import { LASFile } from './laslaz-decoder';
import { getLASSchema } from './get-las-schema';
export default function parseLAS(arrayBuffer, options) {
  return parseLASMesh(arrayBuffer, options);
}

function parseLASMesh(arrayBuffer) {
  var _options$las;
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let pointIndex = 0;
  let positions;
  let colors;
  let intensities;
  let classifications;
  let originalHeader;
  const lasMesh = {
    loader: 'las',
    loaderData: {},
    schema: new Schema([]),
    header: {
      vertexCount: 0,
      boundingBox: [[0, 0, 0], [0, 0, 0]]
    },
    attributes: {},
    topology: 'point-list',
    mode: 0
  };

  parseLASChunked(arrayBuffer, (_options$las = options.las) === null || _options$las === void 0 ? void 0 : _options$las.skip, function () {
    var _options$las3, _options$onProgress;
    let decoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let lasHeader = arguments.length > 1 ? arguments[1] : undefined;
    if (!originalHeader) {
      var _options$las2;
      originalHeader = lasHeader;
      const total = lasHeader.totalToRead;
      const PositionsType = (_options$las2 = options.las) !== null && _options$las2 !== void 0 && _options$las2.fp64 ? Float64Array : Float32Array;
      positions = new PositionsType(total * 3);
      colors = lasHeader.pointsFormatId >= 2 ? new Uint8Array(total * 4) : null;
      intensities = new Uint16Array(total);
      classifications = new Uint8Array(total);
      lasMesh.loaderData = lasHeader;
      lasMesh.attributes = {
        POSITION: {
          value: positions,
          size: 3
        },
        intensity: {
          value: intensities,
          size: 1
        },
        classification: {
          value: classifications,
          size: 1
        }
      };
      if (colors) {
        lasMesh.attributes.COLOR_0 = {
          value: colors,
          size: 4
        };
      }
    }
    const batchSize = decoder.pointsCount;
    const {
      scale: [scaleX, scaleY, scaleZ],
      offset: [offsetX, offsetY, offsetZ]
    } = lasHeader;
    const twoByteColor = detectTwoByteColors(decoder, batchSize, (_options$las3 = options.las) === null || _options$las3 === void 0 ? void 0 : _options$las3.colorDepth);
    for (let i = 0; i < batchSize; i++) {
      const {
        position,
        color,
        intensity,
        classification
      } = decoder.getPoint(i);
      positions[pointIndex * 3] = position[0] * scaleX + offsetX;
      positions[pointIndex * 3 + 1] = position[1] * scaleY + offsetY;
      positions[pointIndex * 3 + 2] = position[2] * scaleZ + offsetZ;
      if (color && colors) {
        if (twoByteColor) {
          colors[pointIndex * 4] = color[0] / 256;
          colors[pointIndex * 4 + 1] = color[1] / 256;
          colors[pointIndex * 4 + 2] = color[2] / 256;
        } else {
          colors[pointIndex * 4] = color[0];
          colors[pointIndex * 4 + 1] = color[1];
          colors[pointIndex * 4 + 2] = color[2];
        }
        colors[pointIndex * 4 + 3] = 255;
      }
      intensities[pointIndex] = intensity;
      classifications[pointIndex] = classification;
      pointIndex++;
    }
    const meshBatch = {
      ...lasMesh,
      header: {
        vertexCount: lasHeader.totalRead
      },
      progress: lasHeader.totalRead / lasHeader.totalToRead
    };
    options === null || options === void 0 ? void 0 : (_options$onProgress = options.onProgress) === null || _options$onProgress === void 0 ? void 0 : _options$onProgress.call(options, meshBatch);
  });

  lasMesh.header = {
    vertexCount: originalHeader.totalToRead,
    boundingBox: getMeshBoundingBox((lasMesh === null || lasMesh === void 0 ? void 0 : lasMesh.attributes) || {})
  };
  if (lasMesh) {
    lasMesh.schema = getLASSchema(lasMesh.loaderData, lasMesh.attributes);
  }
  return lasMesh;
}

export function parseLASChunked(rawData, skip) {
  let onParseData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const dataHandler = new LASFile(rawData);
  try {
    dataHandler.open();
    const header = dataHandler.getHeader();
    const Unpacker = dataHandler.getUnpacker();
    const totalToRead = Math.ceil(header.pointsCount / Math.max(1, skip));
    header.totalToRead = totalToRead;
    let totalRead = 0;

    while (true) {
      const chunk = dataHandler.readData(1000 * 100, 0, skip);
      totalRead += chunk.count;
      header.totalRead = totalRead;
      header.versionAsString = chunk.versionAsString;
      header.isCompressed = chunk.isCompressed;
      const unpacker = new Unpacker(chunk.buffer, chunk.count, header);

      onParseData(unpacker, header);
      if (!chunk.hasMoreData || totalRead >= totalToRead) {
        break;
      }
    }
  } catch (e) {
    throw e;
  } finally {
    dataHandler.close();
  }
}

function detectTwoByteColors() {
  let decoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let batchSize = arguments.length > 1 ? arguments[1] : undefined;
  let colorDepth = arguments.length > 2 ? arguments[2] : undefined;
  let twoByteColor = false;
  switch (colorDepth) {
    case 8:
      twoByteColor = false;
      break;
    case 16:
      twoByteColor = true;
      break;
    case 'auto':
      if (decoder.getPoint(0).color) {
        for (let i = 0; i < batchSize; i++) {
          const {
            color
          } = decoder.getPoint(i);
          if (color[0] > 255 || color[1] > 255 || color[2] > 255) {
            twoByteColor = true;
          }
        }
      }
      break;
    default:
      console.warn('las: illegal value for options.las.colorDepth');
      break;
  }
  return twoByteColor;
}
//# sourceMappingURL=parse-las.js.map