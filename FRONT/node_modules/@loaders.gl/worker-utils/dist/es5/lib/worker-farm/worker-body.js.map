{"version":3,"file":"worker-body.js","names":["getParentPort","parentPort","eval","globalThis","onMessageWrapperMap","Map","WorkerBody","self","Boolean","onMessage","handleMessage","message","data","type","payload","on","console","debug","onmessage","onMessageWrapper","get","isKnownMessage","error","addEventListener","delete","removeEventListener","source","transferList","getTransferList","postMessage","startsWith"],"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nfunction getParentPort() {\n  // const isNode = globalThis.process;\n  let parentPort;\n  try {\n    // prettier-ignore\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    parentPort = globalThis.parentPort;\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static inWorkerThread(): boolean {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    function handleMessage(message) {\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const parentPort = getParentPort();\n      const {type, payload} = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      // if (message == 'exit') { parentPort.unref(); }\n      // eslint-disable-next-line\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const parentPort = getParentPort();\n        const {type, payload} = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n    // console.log('posting message', data);\n    const transferList = getTransferList(payload);\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-ignore\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"mappings":";;;;;;;;;AACA;AAGA,SAASA,aAAa,GAAG;EAEvB,IAAIC,UAAU;EACd,IAAI;IAEFC,IAAI,CAAC,gEAAgE,CAAC;IACtED,UAAU,GAAGE,UAAU,CAACF,UAAU;EAEpC,CAAC,CAAC,gBAAM,CAAC;EACT,OAAOA,UAAU;AACnB;AAEA,IAAMG,mBAAmB,GAAG,IAAIC,GAAG,EAAE;;AAAC,IAKjBC,UAAU;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAE7B,0BAAiC;MAC/B,OAAO,OAAOC,IAAI,KAAK,WAAW,IAAIC,OAAO,CAACR,aAAa,EAAE,CAAC;IAChE;;EAAC;IAAA;IAAA;IAKD,aAAqBS,SAA0E,EAAE;MAC/F,SAASC,aAAa,CAACC,OAAO,EAAE;QAE9B,IAAMV,UAAU,GAAGD,aAAa,EAAE;QAClC,WAAwBC,UAAU,GAAGU,OAAO,GAAGA,OAAO,CAACC,IAAI;UAApDC,IAAI,QAAJA,IAAI;UAAEC,OAAO,QAAPA,OAAO;QAIpBL,SAAS,CAACI,IAAI,EAAEC,OAAO,CAAC;MAC1B;MAEA,IAAMb,UAAU,GAAGD,aAAa,EAAE;MAClC,IAAIC,UAAU,EAAE;QACdA,UAAU,CAACc,EAAE,CAAC,SAAS,EAAEL,aAAa,CAAC;QAGvCT,UAAU,CAACc,EAAE,CAAC,MAAM,EAAE;UAAA,OAAMC,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QAAA,EAAC;MACnE,CAAC,MAAM;QAELd,UAAU,CAACe,SAAS,GAAGR,aAAa;MACtC;IACF;EAAC;IAAA;IAAA,OAED,0BACED,SAA0E,EAC1E;MACA,IAAIU,gBAAgB,GAAGf,mBAAmB,CAACgB,GAAG,CAACX,SAAS,CAAC;MAEzD,IAAI,CAACU,gBAAgB,EAAE;QACrBA,gBAAgB,GAAG,0BAACR,OAA0B,EAAK;UACjD,IAAI,CAACU,cAAc,CAACV,OAAO,CAAC,EAAE;YAC5B;UACF;;UAGA,IAAMV,UAAU,GAAGD,aAAa,EAAE;UAClC,YAAwBC,UAAU,GAAGU,OAAO,GAAGA,OAAO,CAACC,IAAI;YAApDC,IAAI,SAAJA,IAAI;YAAEC,OAAO,SAAPA,OAAO;UACpBL,SAAS,CAACI,IAAI,EAAEC,OAAO,CAAC;QAC1B,CAAC;MACH;MAEA,IAAMb,UAAU,GAAGD,aAAa,EAAE;MAClC,IAAIC,UAAU,EAAE;QACde,OAAO,CAACM,KAAK,CAAC,iBAAiB,CAAC;MAClC,CAAC,MAAM;QACLnB,UAAU,CAACoB,gBAAgB,CAAC,SAAS,EAAEJ,gBAAgB,CAAC;MAC1D;IACF;EAAC;IAAA;IAAA,OAED,6BACEV,SAA0E,EAC1E;MACA,IAAMU,gBAAgB,GAAGf,mBAAmB,CAACgB,GAAG,CAACX,SAAS,CAAC;MAC3DL,mBAAmB,CAACoB,MAAM,CAACf,SAAS,CAAC;MACrC,IAAMR,UAAU,GAAGD,aAAa,EAAE;MAClC,IAAIC,UAAU,EAAE;QACde,OAAO,CAACM,KAAK,CAAC,iBAAiB,CAAC;MAClC,CAAC,MAAM;QACLnB,UAAU,CAACsB,mBAAmB,CAAC,SAAS,EAAEN,gBAAgB,CAAC;MAC7D;IACF;;EAAC;IAAA;IAAA;IAOD,qBAAmBN,IAAuB,EAAEC,OAA6B,EAAQ;MAC/E,IAAMF,IAAuB,GAAG;QAACc,MAAM,EAAE,YAAY;QAAEb,IAAI,EAAJA,IAAI;QAAEC,OAAO,EAAPA;MAAO,CAAC;MAErE,IAAMa,YAAY,GAAG,IAAAC,gCAAe,EAACd,OAAO,CAAC;MAE7C,IAAMb,UAAU,GAAGD,aAAa,EAAE;MAClC,IAAIC,UAAU,EAAE;QACdA,UAAU,CAAC4B,WAAW,CAACjB,IAAI,EAAEe,YAAY,CAAC;MAE5C,CAAC,MAAM;QAELxB,UAAU,CAAC0B,WAAW,CAACjB,IAAI,EAAEe,YAAY,CAAC;MAC5C;IACF;EAAC;EAAA;AAAA;AAAA;AAIH,SAASN,cAAc,CAACV,OAA0B,EAAE;EAClD,IAAOE,IAAI,GAAUF,OAAO,CAArBE,IAAI;IAAED,IAAI,GAAID,OAAO,CAAfC,IAAI;EACjB,OACEC,IAAI,KAAK,SAAS,IAClBD,IAAI,IACJ,OAAOA,IAAI,CAACc,MAAM,KAAK,QAAQ,IAC/Bd,IAAI,CAACc,MAAM,CAACI,UAAU,CAAC,YAAY,CAAC;AAExC"}